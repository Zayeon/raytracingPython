##VERTEX

#version 330

layout(location = 0) in vec3 position;
layout(location = 1) in vec3 normal;

uniform mat4 projMatrix;
uniform mat4 viewMatrix;
uniform mat4 modelMatrix;
uniform vec3 lightPosition[4];

out vec3 surfaceNormal;
out vec3 toLightVector[4];

void main()
{
	vec4 worldPosition = modelMatrix * vec4(position, 1.0);
	gl_Position = projMatrix * viewMatrix * worldPosition;
	surfaceNormal = (modelMatrix * vec4(normal, 0.0)).xyz;
	for(int i=0; i<4; i++){
        toLightVector[i] = lightPosition[i] - worldPosition.xyz;
	}
}

##FRAGMENT

#version 330

in vec3 surfaceNormal;
in vec3 toLightVector[4];

uniform vec4 colour;
uniform vec3 lightColour[4];

out vec4 outColour;
void main()
{
    vec3 unitNormal = normalize(surfaceNormal);

    vec3 totalDiffuse = vec3(0.0);

    for(int i=0; i<4; i++){
        vec3 unitLightVector = normalize(toLightVector[i]);
        float nDot1 = dot(unitNormal, unitLightVector);
        float brightness = max(nDot1, 0.0);
        totalDiffuse += brightness * lightColour[i];
    }
    totalDiffuse = max(totalDiffuse, 0.2);
	outColour = vec4(totalDiffuse, 1.0) * colour;
}