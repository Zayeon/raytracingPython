#version 430
layout(local_size_x = 1, local_size_y = 1) in;
layout(rgba32f, binding = 0) uniform image2D imgOutput;

// Initial constants
const float maxX = 5.0;
const float maxY = 5.0;

// Hard-coded sphere
const vec3 sphereC = vec3(0.0, 0.0, -10.0);
const float sphereR = 1.0;
const float sphereSpecular = .5;
const float sphereShininess = 32;

// Glass ball
const vec3 glassC = vec3(0.0, 0.0, -5.0);
const float glassR = 0.1;


// Light
const float ambientLight  = 0.1f;
const vec3 lightPosition = vec3(5.0, 15.0, 0.0);
const vec3 lightColor = vec3(1.0, 1.0, 1.0);

// Camera
vec3 cameraPos = vec3(0.0, 0.0, 0.0);

void sphereIntersect(vec3 rayO, vec3 rayD, vec3 sphereC, float sphereR, out float bsqmc, out float t0, out float t1) {
    vec3 omc = rayO - sphereC;
    float a = dot(rayD, rayD);
    float b = dot(rayD, omc);
    float c = dot(omc, omc) - sphereR * sphereR;
    bsqmc = b * b - c;
    t0 = (-b - bsqmc) / 2 * a;
    t1 = (-b + bsqmc) / 2 * a;

}

void trace(vec3 rayO, vec3 rayD, int depth) {

}

void main() {
  // base pixel colour for image
  vec4 pixel = vec4(0.0, 0.0, 0.0, 1.0);

  // get index in global work group i.e x,y position
  ivec2 pixelCoords = ivec2(gl_GlobalInvocationID.xy);

  // Calculating the ray for this pixel
  ivec2 dims = imageSize(imgOutput);
  float x = -(float(pixelCoords.x * 2 - dims.x) / dims.x);
  float y = (float(pixelCoords.y * 2 - dims.y) / dims.y);
  vec3 rayO = vec3(x * maxX, y * maxY, 0.0);
  vec3 rayD = vec3(0.0, 0.0, -1.0);//normalize(rayO - cameraPos);

  // Calculating glass intersection
  float bsqmcG, t0, t1;
  sphereIntersect(rayO, rayD, glassC, glassR, bsqmcG, t0, t1);

  // hit one or both sides
  if (bsqmcG >= 0.0) {
    pixel = vec4(1);
  }
  else {

      // Calculating sphere intersection
      float bsqmc, t0, t1;
      sphereIntersect(rayO, rayD, sphereC, sphereR, bsqmc, t0, t1);

      // hit one or both sides
      if (bsqmc >= 0.0) {
        // Do lighting

        vec3 pHit = rayO + t0 * rayD;
        vec3 lightD = normalize(lightPosition - pHit);

        vec3 normal = normalize(pHit - sphereC);
        float diff = max(dot(normal, lightD), 0.0);
        vec3 diffuse = diff * lightColor;

        vec3 viewD = normalize(cameraPos - pHit);
        vec3 reflectDir = reflect(-lightD, normal);
        float spec = pow(max(dot(viewD, reflectDir), 0.0), sphereShininess);
        vec3 specular = sphereSpecular * spec * lightColor;

        vec3 objectColor = vec3(0.4, 0.4, 1.0)* (ambientLight + diffuse + specular);

        pixel = vec4(objectColor, 1.0);



      }
  }


  // output to a specific pixel in the image
  imageStore(imgOutput, pixelCoords, pixel);
}