#version 430
layout(local_size_x = 1, local_size_y = 1) in;
layout(rgba32f, binding = 0) uniform image2D imgOutput;

// Initial constants
const float maxX = 5.0;
const float maxY = 5.0;

// Hard-coded sphere
const vec3 sphereC = vec3(0.0, 0.0, -10.0);
const float sphereR = 1.0;


void main() {
  // base pixel colour for image
  vec4 pixel = vec4(0.0, 0.0, 0.0, 1.0);

  // get index in global work group i.e x,y position
  ivec2 pixelCoords = ivec2(gl_GlobalInvocationID.xy);

  // Calculating the ray for this pixel
  ivec2 dims = imageSize(imgOutput);
  float x = (float(pixelCoords.x * 2 - dims.x) / dims.x);
  float y = (float(pixelCoords.y * 2 - dims.y) / dims.y);
  vec3 rayO = vec3(x * maxX, y * maxY, 0.0);
  vec3 rayD = vec3(0.0, 0.0, -1.0);

  vec3 omc = rayO - sphereC;
  float b = dot(rayD, omc);
  float c = dot(omc, omc) - sphereR * sphereR;
  float bsqmc = b * b - c;

  // hit one or both sides
  if (bsqmc >= 0.0) {
    pixel = vec4(0.4, 0.4, 1.0, 1.0);
  }


  // output to a specific pixel in the image
  imageStore(imgOutput, pixelCoords, pixel);
}